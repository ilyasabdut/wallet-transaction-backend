// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi","tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int             @id @default(autoincrement())
  username    String          @unique
  password    String          @db.VarChar(255)
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  deleted_at  DateTime?
  roles       UserRolePivot[]
  transaction Transaction[]

  transactionFromUserId Transaction[] @relation("transactionFromUserId")
  transactionToUserId   Transaction[] @relation("transactionToUserId")
}

model UserRolePivot {
  id         Int       @id @default(autoincrement())
  user_id    Int
  role_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user User @relation(fields: [user_id], references: [id])
  role Role @relation(fields: [role_id], references: [id])
}

model Role {
  id         Int             @id @default(autoincrement())
  name       String          @unique
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
  deleted_at DateTime?
  users      UserRolePivot[]
}

model Transaction {
  id           Int       @id @default(autoincrement())
  user_id      Int
  currency_id  Int
  amount       Float
  type         String    @db.VarChar(255)
  from_user_id Int?
  to_user_id   Int
  notes        String?   @db.VarChar(255)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  user                  User  @relation(fields: [user_id], references: [id])
  transactionFromUserId User? @relation("transactionFromUserId", fields: [from_user_id], references: [id])
  transactionToUserId   User? @relation("transactionToUserId", fields: [to_user_id], references: [id])

  currency Currency @relation(fields: [currency_id], references: [id])
}

model Currency {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  deleted_at   DateTime?
  transactions Transaction[]
}
